/// @ 0.19.0

// シンプルなマルコフ連鎖文章生成
// Misskey Play または AiScript Scratchpad で実行してください

// ============================================
// 設定
// ============================================

// 取得するノート数（1-100）
let FETCH_LIMIT = 50

// 生成する文章数
let GENERATE_COUNT = 3

// ============================================
// テキスト処理関数
// ============================================

@clean_text(text) {
	var t = text

	// 改行をスペースに
	t = t.replace(Str:lf, " ")

	// 連続スペースを1つに
	loop {
		let before = t
		t = t.replace("  ", " ")
		if before == t break
	}

	return t.trim()
}

// N-gram生成（2文字単位）
@make_ngrams(text) {
	let chars = text.to_arr()
	var ngrams = {}

	for let i, (chars.len - 2) {
		let key = `{chars.at(i)}{chars.at(i + 1)}`
		let next = chars.at(i + 2)

		if Obj:has(ngrams, key) {
			let arr = ngrams[key]
			arr.push(next)
		} else {
			ngrams[key] = [next]
		}
	}

	return ngrams
}

// 複数のN-gramをマージ
@merge_ngrams(ng1, ng2) {
	var result = ng1
	let keys = Obj:keys(ng2)

	each let key, keys {
		if Obj:has(result, key) {
			let arr1 = result[key]
			let arr2 = ng2[key]
			each let item, arr2 {
				arr1.push(item)
			}
			result[key] = arr1
		} else {
			result[key] = ng2[key]
		}
	}

	return result
}

// 文章生成
@generate(ngrams, max_len) {
	let keys = Obj:keys(ngrams)
	if keys.len == 0 return "データ不足"

	// ランダムな開始点
	var text = keys.at(Math:rnd(0, keys.len - 1))

	for let i, max_len {
		let chars = text.to_arr()
		if chars.len < 2 break

		let key = `{chars.at(chars.len - 2)}{chars.at(chars.len - 1)}`

		if !Obj:has(ngrams, key) break

		let candidates = ngrams[key]
		let next = candidates.at(Math:rnd(0, candidates.len - 1))
		text = `{text}{next}`

		// 句点で終了
		if (next == "。" || next == "！" || next == "？") && text.len > 10 {
			break
		}
	}

	return text
}

// ============================================
// メイン処理
// ============================================

<: "📝 マルコフ連鎖文章生成を開始します"
<: ""

// 自分のノートを取得（i/notesエンドポイント）
<: `⏳ ノートを取得中...（最大{FETCH_LIMIT}件）`

// Mk:apiは自動的にアクセストークンを付与します
var notes = null

// まず i/notes を試す
notes = Mk:api("i/notes", { limit: FETCH_LIMIT })

// エラーチェック
if Core:type(notes) == "error" {
	<: `❌ エラー: {notes.name}`
	<: "💡 このスクリプトはMisskey Playで実行してください"
	Core:abort("API Error")
}

<: `✅ {notes.len}件のノートを取得しました`
<: ""

// マルコフモデル構築
<: "🔨 マルコフモデルを構築中..."

var all_ngrams = {}
var valid_count = 0

each let note, notes {
	if Core:type(note) == "obj" {
		if note["text"] != null {
			let text = note["text"]
			if text.len > 5 {
				let cleaned = clean_text(text)
				let ng = make_ngrams(cleaned)
				all_ngrams = merge_ngrams(all_ngrams, ng)
				valid_count = valid_count + 1
			}
		}
	}
}

let model_size = Obj:keys(all_ngrams).len
<: `✅ {valid_count}件のノートから{model_size}個のパターンを学習しました`
<: ""

// 文章生成
<: "✨ 文章を生成します..."
<: ""
<: "--- 生成された文章 ---"
<: ""

for let i, GENERATE_COUNT {
	let text = generate(all_ngrams, 50)
	<: `{i + 1}. {text}`
	<: ""
}

<: "--- 完了 ---"
<: ""
<: "💡 この文章はあなたのノートから学習して生成されました"
